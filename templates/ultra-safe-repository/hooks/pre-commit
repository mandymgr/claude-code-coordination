#!/bin/bash

# =============================================================================
# üîí ULTRA-SAFE PRE-COMMIT HOOK TEMPLATE
# Universal security scanner for all project types
# Version: 1.0 (September 2025)
# =============================================================================

echo "üîí ULTRA-SAFE Security Check: Scanning for dangerous files..."

# Define dangerous patterns
DANGEROUS_PATTERNS=(
    "node_modules/"
    "*.lock"
    ".env"
    "*.secret"
    "*.key"
    "*.pem"
    "dist/"
    "build/"
    "out/"
    ".cache/"
    "*.log"
    "credentials"
    "secrets"
    "*.sqlite"
    "*.db"
    ".DS_Store"
    "Thumbs.db"
    ".claude/"
    "ai-cache/"
    "backup"
    "tmp/"
    "temp/"
)

# Check staged files
STAGED_FILES=$(git diff --cached --name-only)
DANGEROUS_FOUND=false

for file in $STAGED_FILES; do
    for pattern in "${DANGEROUS_PATTERNS[@]}"; do
        if [[ $file == *"$pattern"* ]]; then
            echo "üö® BLOCKED: Dangerous file detected: $file (matches $pattern)"
            DANGEROUS_FOUND=true
        fi
    done
done

# Check for secrets in file content
echo "üîç Scanning for secrets in staged files..."
SECRETS_PATTERNS=(
    "sk-[a-zA-Z0-9]{48}"  # OpenAI API key
    "ghp_[a-zA-Z0-9]{36}" # GitHub token
    "AIza[0-9A-Za-z-_]{35}" # Google API key
    "AKIA[0-9A-Z]{16}" # AWS Access Key
    "password[[:space:]]*=[[:space:]]*[\"'][^\"']+[\"']" # Password assignments
    "secret[[:space:]]*=[[:space:]]*[\"'][^\"']+[\"']" # Secret assignments
    "api_key[[:space:]]*=[[:space:]]*[\"'][^\"']+[\"']" # API key assignments
)

for file in $STAGED_FILES; do
    if [[ -f "$file" ]]; then
        for pattern in "${SECRETS_PATTERNS[@]}"; do
            if grep -qE "$pattern" "$file" 2>/dev/null; then
                echo "üö® BLOCKED: Potential secret detected in $file"
                DANGEROUS_FOUND=true
            fi
        done
    fi
done

if [ "$DANGEROUS_FOUND" = true ]; then
    echo ""
    echo "‚ùå COMMIT BLOCKED - Dangerous files or secrets detected!"
    echo "üõ°Ô∏è This protects your repository from:"
    echo "   - Dependencies (node_modules)"
    echo "   - Build artifacts (dist/, build/)"
    echo "   - Environment files (.env*)"
    echo "   - Database files (*.db, *.sqlite)"
    echo "   - Lock files (*.lock)"
    echo "   - Secrets and credentials"
    echo "   - Cache and temporary files"
    echo "   - Backup files"
    echo ""
    echo "üîß Fix by:"
    echo "   1. Remove dangerous files: git reset HEAD <file>"
    echo "   2. Update .gitignore if needed"
    echo "   3. Use: git status --ignored to see all ignored files"
    echo ""
    exit 1
fi

# Check file sizes (prevent large files)
echo "üìè Checking file sizes..."
for file in $STAGED_FILES; do
    if [[ -f "$file" ]]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [[ $size -gt 1048576 ]]; then  # 1MB limit
            echo "üö® BLOCKED: Large file detected: $file ($(($size/1024))KB)"
            echo "   Repositories should contain only source code"
            DANGEROUS_FOUND=true
        fi
    fi
done

if [ "$DANGEROUS_FOUND" = true ]; then
    echo "‚ùå COMMIT BLOCKED - Large files detected!"
    exit 1
fi

echo "‚úÖ Security check passed - Safe to commit!"
echo "üìä Files to commit: $(echo "$STAGED_FILES" | wc -l | tr -d ' ')"
echo ""